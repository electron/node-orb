version: 2.1
orbs:
  # Your orb will be automatically injected here during the pipeline.
  # Reference your orb's jobs and commands below as they will exist when built.
  orb-tools: circleci/orb-tools@12.0
  # The orb definition is intentionally not included here. It will be injected into the pipeline.
  node: {}

# Use this tag to ensure test jobs always run,
# even though the downstream publish job will only run on release tags.
filters: &filters
  tags:
    only: /.*/

# Filter for release tags.
release-filters: &release-filters
  branches:
    ignore: /.*/
  tags:
    only: /^v[0-9]+\.[0-9]+\.[0-9]+$/

cache-version: &cache-version
  - v3

node-versions: &node-versions
  - 20.11.1
  - '18.19'
  - '16'
  - latest
  - lts

executor-matrix: &executor-matrix
  - node/linux
  - node/macos
  - node/windows

step-confirm-version: &step-confirm-version
  run:
    command: 'echo "Installed version: $(node -v)" && echo "Expected version: v$(cat ~/.node-js-version)" && [ $(node -v) = "v$(cat ~/.node-js-version)" ]'
    name: Confirm Version

step-confirm-nvmrc-version: &step-confirm-nvmrc-version
  run:
    command: 'echo ".nvmrc version: v$(cat .nvmrc)" && echo "Resolved version: v$(cat ~/.node-js-version)" && [ "$(cat .nvmrc)" = "$(cat ~/.node-js-version)" ]'
    name: Confirm .nvmrc Version

step-confirm-tests-nvmrc-version: &step-confirm-tests-nvmrc-version
  run:
    command: 'echo ".nvmrc version: v$(cat ~/project/sample/.nvmrc)" && echo "Resolved version: v$(cat ~/.node-js-version)" && [ "$(cat ~/project/sample/.nvmrc)" = "$(cat ~/.node-js-version)" ]'
    name: Confirm .nvmrc Version

step-confirm-tests-ran: &step-confirm-tests-ran
  run:
    command: '[ -f ~/project/sample/.test-ran ]'
    name: Confirm Tests Ran

step-confirm-tests-not-ran: &step-confirm-tests-not-ran
  run:
    command: '[ ! -f ~/project/sample/.test-ran ]'
    name: Confirm Tests Haven't Run Yet

step-confirm-packages-not-installed: &step-confirm-packages-not-installed
  run:
    command: '[ ! -d ~/project/sample/node_modules ]'
    name: Confirm Packages Aren't Installed Yet

step-confirm-custom-steps-ran: &step-confirm-custom-steps-ran
  run:
    command: '[ -f ~/project/sample/.custom-test-ran ]'
    name: Confirm Custom Test Steps Ran

executors:
  linux-edge:
    docker:
      - image: cimg/base:edge
  windows-edge:
    machine:
      image: windows-server-2022-gui:edge
      resource_class: windows.medium
      shell: bash.exe

jobs:
  # Create jobs to test the commands of your orbs.
  # You may want to add additional validation steps to ensure the commands are working as expected.
  check-version:
    executor: << parameters.executor >>
    parameters:
      arch:
        default: ""
        description: >
          Arch to use for executing the Bash script - only supported for installing
          x86_64 Node.js on macOS ARM64 (must install Rosetta first).
        type: string
      cache-version:
        default: v1
        description: >
          Change the default cache version if you need to clear the cache for any
          reason.
        type: string
      executor:
        description: The executor to use for the job
        type: string
      node-version:
        default: ""
        description: >
          Specify the Node.js version to install. Can be a major version, a minor
          version (e.g. 18.16), an exact version number, "latest" or "lts".
        type: string
      node-version-file:
        default: ""
        description: >
          File containing the Node.js version to install, e.g. .nvmrc or .node-version.
        type: string
      with-cache:
        default: true
        description: Cache the Node.js version to avoid re-downloading on future runs
        type: boolean
    steps:
      - node/install:
          arch: << parameters.arch >>
          cache-version: << parameters.cache-version >>
          node-version: << parameters.node-version >>
          node-version-file: << parameters.node-version-file >>
          with-cache: << parameters.with-cache >>
      - *step-confirm-version
      - when:
          condition: << parameters.arch >>
          steps:
            - run:
                command: 'echo "Installed arch: $(node -p "process.arch === \"x64\" ? \"x86_64\" : process.arch")" && echo "Expected arch: << parameters.arch >>" && [ $(node -p "process.arch === \"x64\" ? \"x86_64\" : process.arch") = "<< parameters.arch >>" ]'
                name: Confirm Arch
  install-rosetta:
    executor: << parameters.executor >>
    parameters:
      executor:
        description: The executor to use for the job
        type: string
    steps:
      - node/install-rosetta
      - run:
          command: '[ $(/usr/bin/pgrep -q oahd && echo Yes || echo No) = "Yes" ]'
          name: Confirm Rosetta install
  run-tests:
    executor: << parameters.executor >>
    parameters:
      arch:
        default: ""
        description: >
          Arch to use for executing the Bash script - only supported for installing
          x86_64 Node.js on macOS ARM64 (must install Rosetta first).
        type: string
      cache-version:
        default: v1
        description: >
          Change the default cache version if you need to clear the cache for any
          reason.
        type: string
      executor:
        description: The executor to use for the job
        type: string
      node-version:
        default: ""
        description: >
          Specify the Node.js version to install. Can be a major version, a minor
          version (e.g. 18.16), an exact version number, "latest" or "lts".
        type: string
      node-version-file:
        default: ""
        description: >
          File containing the Node.js version to install, e.g. .nvmrc or .node-version.
        type: string
      use-test-steps:
        default: false
        description: Use provided test steps - required due to CircleCI shortcomings.
        type: boolean
    steps:
      - *step-confirm-tests-not-ran
      - node/test:
          app-dir: ~/project/sample
          arch: << parameters.arch >>
          cache-version: << parameters.cache-version >>
          node-version: << parameters.node-version >>
          node-version-file: << parameters.node-version-file >>
          post-node-js-install-steps:
            - *step-confirm-packages-not-installed
          test-steps:
            - run: echo '1' > ~/project/sample/.custom-test-ran
          use-test-steps: << parameters.use-test-steps >>
      - unless:
          condition: << parameters.use-test-steps >>
          steps:
            - *step-confirm-tests-ran
      - when:
          condition: << parameters.use-test-steps >>
          steps:
            - *step-confirm-custom-steps-ran
workflows:
  test-deploy:
    jobs:
      # Make sure to include "filters: *filters" in every test job you want to run as part of your deployment.
      # Test your orb's commands in a custom job and test your orb's jobs directly as a part of this workflow.
      - check-version:
          filters: *filters
          matrix:
            alias: check-version
            parameters:
              cache-version: *cache-version
              executor: *executor-matrix
              node-version: *node-versions
              with-cache:
                - false
                - true
      - check-version:
          filters: *filters
          matrix:
            alias: check-version-with-node-version-file
            parameters:
              cache-version: *cache-version
              executor: *executor-matrix
              node-version-file:
                - '.nvmrc'
              with-cache:
                - false
                - true
          pre-steps:
            - run: echo '20.6.1' >> .nvmrc
          post-steps:
            - *step-confirm-nvmrc-version
      - check-version:
          filters: *filters
          matrix:
            alias: check-version-with-arch
            parameters:
              arch:
                - arm64
                - x86_64
              cache-version: *cache-version
              executor:
                - node/macos
              node-version: *node-versions
              with-cache:
                - false
                - true
          pre-steps:
            - node/install-rosetta
      - check-version:
          filters: *filters
          matrix:
            alias: check-version-edge
            parameters:
              cache-version: *cache-version
              executor:
                - linux-edge
                - windows-edge
              node-version: *node-versions
              with-cache:
                - false
                - true
      - node/install:
          install-yarn: false
          filters: *filters
          matrix:
            alias: check-version-job
            parameters:
              cache-version: *cache-version
              executor: *executor-matrix
              node-version: *node-versions
              with-cache:
                - false
                - true
          post-steps:
            - *step-confirm-version
      - node/install:
          install-yarn: false
          filters: *filters
          matrix:
            alias: check-version-job-with-node-version-file
            parameters:
              cache-version: *cache-version
              executor: *executor-matrix
              node-version-file:
                - '.nvmrc'
              with-cache:
                - false
                - true
          pre-steps:
            - run: echo '20.6.1' >> .nvmrc
          post-steps:
            - *step-confirm-nvmrc-version
            - *step-confirm-version
      - node/install:
          install-yarn: false
          filters: *filters
          matrix:
            alias: check-version-edge-job
            parameters:
              cache-version: *cache-version
              executor: 
                - linux-edge
                - windows-edge
              node-version: *node-versions
              with-cache:
                - false
                - true
          post-steps:
            - *step-confirm-version
      - node/install:
          name: node/install-<< matrix.arch >>-<< matrix.cache-version >>-<< matrix.executor >>-<< matrix.node-version >>-<< matrix.with-cache >>
          install-yarn: false
          filters: *filters
          matrix:
            alias: check-version-job-with-arch
            parameters:
              arch:
                - arm64
                - x86_64
              cache-version: *cache-version
              executor:
                - node/macos
              node-version: *node-versions
              with-cache:
                - false
                - true
          pre-steps:
            - node/install-rosetta
          post-steps:
            - *step-confirm-version
            - run:
                command: 'echo "Installed arch: $(node -p "process.arch === \"x64\" ? \"x86_64\" : process.arch")" && echo "Expected arch: << matrix.arch >>" && [ $(node -p "process.arch === \"x64\" ? \"x86_64\" : process.arch") = "<< matrix.arch >>" ]'
                name: Confirm Arch
      - install-rosetta:
          filters: *filters
          matrix:
            parameters:
              executor:
                - node/macos
      - run-tests:
          filters: *filters
          matrix:
            parameters:
              cache-version: *cache-version
              executor: *executor-matrix
              node-version: *node-versions
              use-test-steps:
                - false
                - true
      - run-tests:
          filters: *filters
          matrix:
            alias: run-tests-with-node-version-file
            parameters:
              cache-version: *cache-version
              executor: *executor-matrix
              node-version-file:
                - './sample/.nvmrc'
              use-test-steps:
                - false
                - true
          post-steps:
            - *step-confirm-tests-nvmrc-version
      - run-tests:
          filters: *filters
          matrix:
            alias: run-tests-with-arch
            parameters:
              arch:
                - arm64
                - x86_64
              cache-version: *cache-version
              executor:
                - node/macos
              node-version: *node-versions
              use-test-steps:
                - false
                - true
          pre-steps:
            - node/install-rosetta
      - run-tests:
          filters: *filters
          matrix:
            alias: run-tests-edge
            parameters:
              cache-version: *cache-version
              executor:
                - linux-edge
                - windows-edge
              node-version: *node-versions
              use-test-steps:
                - false
                - true
      - node/test:
          app-dir: ~/project/sample
          filters: *filters
          matrix:
            alias: run-tests-job
            parameters:
              cache-version: *cache-version
              executor: *executor-matrix
              node-version: *node-versions
              use-test-steps:
                - false
                - true
          test-steps:
            - run: echo '1' > ~/project/sample/.custom-test-ran
          post-node-js-install-steps:
            - *step-confirm-packages-not-installed
          pre-steps:
            - *step-confirm-tests-not-ran
          post-steps:
            - unless:
                condition: << matrix.use-test-steps >>
                steps:
                  - *step-confirm-tests-ran
            - when:
                condition: << matrix.use-test-steps >>
                steps:
                  - *step-confirm-custom-steps-ran
      - node/test:
          app-dir: ~/project/sample
          filters: *filters
          matrix:
            alias: run-tests-job-with-node-version-file
            parameters:
              cache-version: *cache-version
              executor: *executor-matrix
              node-version-file:
                - './sample/.nvmrc'
              use-test-steps:
                - false
                - true
          test-steps:
            - run: echo '1' > ~/project/sample/.custom-test-ran
          post-node-js-install-steps:
            - *step-confirm-packages-not-installed
          pre-steps:
            - *step-confirm-tests-not-ran
          post-steps:
            - *step-confirm-tests-nvmrc-version
            - unless:
                condition: << matrix.use-test-steps >>
                steps:
                  - *step-confirm-tests-ran
            - when:
                condition: << matrix.use-test-steps >>
                steps:
                  - *step-confirm-custom-steps-ran
      - node/test:
          name: node/test-<< matrix.arch >>-<< matrix.cache-version >>-<< matrix.executor >>-<< matrix.node-version >>-<< matrix.use-test-steps >>
          app-dir: ~/project/sample
          filters: *filters
          matrix:
            alias: run-tests-job-with-arch
            parameters:
              arch:
                - arm64
                - x86_64
              cache-version: *cache-version
              executor:
                - node/macos
              node-version: *node-versions
              use-test-steps:
                - false
                - true
          test-steps:
            - run: echo '1' > ~/project/sample/.custom-test-ran
          post-node-js-install-steps:
            - *step-confirm-packages-not-installed
          pre-steps:
            - node/install-rosetta
            - *step-confirm-tests-not-ran
          post-steps:
            - unless:
                condition: << matrix.use-test-steps >>
                steps:
                  - *step-confirm-tests-ran
            - when:
                condition: << matrix.use-test-steps >>
                steps:
                  - *step-confirm-custom-steps-ran
      - node/test:
          app-dir: ~/project/sample
          filters: *filters
          matrix:
            alias: run-tests-edge-job
            parameters:
              cache-version: *cache-version
              executor:
                - linux-edge
                - windows-edge
              node-version: *node-versions
              use-test-steps:
                - false
                - true
          test-steps:
            - run: echo '1' > ~/project/sample/.custom-test-ran
          post-node-js-install-steps:
            - *step-confirm-packages-not-installed
          pre-steps:
            - *step-confirm-tests-not-ran
          post-steps:
            - unless:
                condition: << matrix.use-test-steps >>
                steps:
                  - *step-confirm-tests-ran
            - when:
                condition: << matrix.use-test-steps >>
                steps:
                  - *step-confirm-custom-steps-ran
      # The orb must be re-packed for publishing, and saved to the workspace.
      - orb-tools/pack:
          filters: *release-filters
      - orb-tools/publish:
          orb_name: electronjs/node
          vcs_type: << pipeline.project.type >>
          pub_type: production
          # Ensure this job requires all test jobs and the pack job.
          requires:
            - orb-tools/pack
            - check-version
            - check-version-with-arch
            - check-version-with-node-version-file
            - install-rosetta
            - check-version-job
            - check-version-job-with-arch
            - check-version-job-with-node-version-file
            - run-tests
            - run-tests-with-arch
            - run-tests-with-node-version-file
            - run-tests-job
            - run-tests-job-with-arch
            - run-tests-job-with-node-version-file
          context: orb-publishing
          filters: *release-filters
